Class COD_FlameProjectile : Actor
{
	default
	{
		+missile;
		projectile;
		speed 35;
		radius 5;
		height 5;
		renderstyle "add";
		damagetype "Fire";
		scale 0.32;
		damage 2;
		decal "Scorch";
		+ripper;
		+bright;
		+rollsprite;
		+rollcenter;
		+BLOODLESSIMPACT;
		//-nogravity;
	}
	states
	{
		Spawn:
			FRPR I 1;
			FRPR CCCC 1;
			goto fade;
			//stop;
		Death:
			//TNT1 A 0 {A_Stop(); bnogravity = true;}
			TNT1 A 0 {
				actor fl = spawn("COD_GroundFire",pos);
				if(!fl)
					return;
				fl.target = target;
				if(pos.z > floorz + 35)
					fl.bnogravity = true;
			}
			TNT1 A 0 A_Explode(5,60,0);
			TNT1 AAA 0 spawndiespark(pos,true);
			TNT1 A 1;
			stop;
		fade:
		Xdeath:
		Crash:
			TNT1 A 0 A_Setscale(frandom(0.4,0.62));
			TNT1 A 0 A_Explode(5,60,0);
			DB54 ABCDEFGHIJKLMNOPQR 1 
			{
				vel *= 0.9;
				spawndiespark(pos);
			}
			stop;
	}
	override void postbeginplay()
	{
		super.postbeginplay();
		A_SetRoll(random(0,360));
		bxflip = random(0,1);
		A_Attachlightdef('FlameLight','GunMuzzleFlash');
	}
	bool ticked;
	override void tick()
	{
		super.tick();
		if(isfrozen())
			return;
		if(!ticked)
		{
			ticked = true;
			return;
		}
		vector3 dif = levellocals.vec3diff(pos,prev);
		vector3 dir = dif.unit();
		double lng = dif.length();
		int stp = max(1,int(lng / 10));
		vector3 actpos = pos;
		for(int i = stp; i > 0; i--)
		{
			spawnFlameTrail(actpos);
			actpos += (dir * 10);
		}
		
	}

	override int DoSpecialDamage (Actor victim, int damage, Name damagetype)
	{
		if(victim && victim.health > 0) //&& victim.health < 10)
		{
			/*
			if(victim.resolvestate("Burning"))
				victim.setstatelabel("Burning");
			*/
			victim.A_GiveInventory("COD_BurningHandler",1);
		}
		return damage;
	}

	void spawnFlameTrail(vector3 position)
	{
		FSpawnParticleParams FTrail;
		//string f = String.Format("%c", int("G") + random(0,5));
		FTrail.Texture = TexMan.CheckForTexture("DB54G0");//("FRPRC0");
		FTrail.Color1 = "FFFFFF";
		FTrail.Style = STYLE_ADD;
		FTrail.Flags = SPF_ROLL|SPF_FULLBRIGHT;
		FTrail.Vel = (frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(-2.5,2.5)); 
		FTrail.Startroll = random(0,360);
		FTrail.RollVel = frandom(-15,15);
		FTrail.StartAlpha = 1.0;
		FTrail.FadeStep = 0.18;
		FTrail.Size = random(27,35);
		FTrail.SizeStep = random(-1,-4);
		FTrail.Lifetime = random(6,8); 
		FTrail.Pos = position;
		Level.SpawnParticle(FTrail);
	}

	
	void spawndiespark(vector3 position, bool stopped = false)
	{
		FSpawnParticleParams PUFSPRK;
		PUFSPRK.Texture = TexMan.CheckForTexture("SPKOA0");
		PUFSPRK.Color1 = "FFFFFF";
		PUFSPRK.Style = STYLE_Add;
		PUFSPRK.Flags = SPF_ROLL|SPF_FULLBRIGHT;
		if(stopped)
		{
			PUFSPRK.Vel = (frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(-2.5,0.5));
			PUFSPRK.accel = (0,0,frandom(0.02,0.06));
		}
		else
		{
			PUFSPRK.Vel = vel + (frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0));
			PUFSPRK.accel = PUFSPRK.Vel * frandom(-0.018,-0.012);
		}
		PUFSPRK.Startroll = random(0,360);
		PUFSPRK.RollVel = 0;
		PUFSPRK.StartAlpha = 1.0;
		PUFSPRK.FadeStep = 0.075;
		PUFSPRK.Size = random(8,14);
		PUFSPRK.SizeStep = -0.5;
		PUFSPRK.Lifetime = random(12,18); 
		PUFSPRK.Pos = position + (random(-radius,radius) * 3,random(-radius,radius) * 3,random(0,height) * 2);
		Level.SpawnParticle(PUFSPRK);
	}

}

Class COD_GroundFire : Actor
{
	default
	{
		renderstyle "add";
		+bright;
		scale 0.4;
		damagetype "Fire";
		+noblockmap;
		+forcexybillboard;
	}
	states
	{
		Spawn:
			CFCF ABCDEFGHIJKLM 1 A_StartSound("M2Flame/FireDamage", 0, CHANF_OVERLAP);
			loop;
	}
	int lifetime, burnRate;
	textureID flaregfx;
	override void postbeginplay()
	{
		super.postbeginplay();
		lifetime = random(2,4) * TICRATE;
		A_Setscale(scale.x + frandom(-0.15,0.18));
		bxflip = random(0,1);
		burnRate = random(15,35);
		switch(random(0,2))
		{
			case 0:	flaregfx = texman.CheckForTexture("LENYA0");	break;
			case 1:	flaregfx = texman.CheckForTexture("LENRA0");	break;
			case 2:	flaregfx = texman.CheckForTexture("LEYSO0");	break;
		}
	}
	override void tick()
	{
		super.tick();
		lifetime--;
		if(lifetime < 20)
		{
			A_Fadeout(0.05);
			A_Setscale(scale.x * 0.95);
		}

		if(getage() % burnRate == 0 && lifetime > 0)
			A_Explode(5,64,XF_THRUSTLESS);
		if(lifetime > 4 && getage() % 4 == 0)
			SpawnFireFlare(pos + (0,0,height * 0.5));
	}

	void SpawnFireFlare(vector3 position)
	{
		FSpawnParticleParams FLARPUF;
		FLARPUF.Texture = flaregfx;
		FLARPUF.Style = STYLE_ADD;
		FLARPUF.Color1 = "FFFFFF";
		FLARPUF.Flags = SPF_FULLBRIGHT;
		FLARPUF.StartRoll = 0;
		FLARPUF.StartAlpha = 1.0;
		FLARPUF.FadeStep = 0.25;
		FLARPUF.Size = scale.x * 120;
		FLARPUF.SizeStep = 1;
		FLARPUF.Lifetime = 4; 
		FLARPUF.Pos = position;
		Level.SpawnParticle(FLARPUF);
	}
}

Class COD_BurningHandler : inventory
{
	uint oldTranslation;
	int burnTics;
	bool burned;
	override void attachtoowner(actor other)
	{
		super.attachtoowner(other);
		oldTranslation = other.translation;
		burnTics = TICRATE * random(3,7);
		other.A_SetTranslation("COD_Burning");
		other.bBright = true;
		//other.bnoblood = true;
		if(!other.bBoss)
			other.bfrightened = true;	//too busy burning alive to think about attacking
		if(other.target && other.target.player)
			tracer = other.target;
	}
	override void detachfromowner()
	{
		owner.translation = oldTranslation;
	}
	override void doeffect()
	{
		super.doeffect();
		
		if(!owner)
			return;
		if(burnTics)
		{
			Owner.A_StartSound("M2Flame/FireDamage", 0, CHANF_OVERLAP);
			burnTics--;
			spawnFxFire((owner.pos.xy + (random(0, owner.radius / 2), random(0, owner.radius / 2)),owner.pos.z + random(0,owner.height * 1.1)));
			spawnburnedSmoke(owner.pos);
			if(burnTics % 15 == 0)
			{
				if(tracer)
					owner.DamageMobj(self,tracer,1,'Burn');
				else
					owner.DamageMobj(self,self,1,'Burn');
			}
		}
			//spawn fire fx
		
		if(burntics <= 0 && !burned)
		{
			if(owner.health > 0)
			{
				burntics = 10;
			}
			else
			{
				burned = true;
				owner.A_SetTranslation("COD_Burned");
				owner.bBright = false;
				spawnburnedSmoke(owner.pos);
			}
		}
	}

	void spawnFxFire(vector3 ps)
	{
		FSpawnParticleParams WTFSMK;
		WTFSMK.Pos = ps;
		WTFSMK.Texture = TexMan.CheckForTexture("FLMEA0");//("FRPRC0");
		WTFSMK.Color1 = 0xFFFFFF;
		WTFSMK.Style = STYLE_ADD;
		WTFSMK.Flags = SPF_ROLL|SPF_FULLBRIGHT;
		WTFSMK.Startroll = random(170,190);//180;//random(0,360);
		WTFSMK.RollVel = frandom(-2,2);
		WTFSMK.StartAlpha = 0.75;
		WTFSMK.Size = frandom(35,48);
		WTFSMK.SizeStep = -4;
		WTFSMK.Lifetime = Random(5,8); 
		WTFSMK.FadeStep = WTFSMK.StartAlpha / WTFSMK.Lifetime;
		WTFSMK.Vel = (frandom(-2.2,2.2),frandom(-2.2,2.2),frandom(-0.5,0.75));
		WTFSMK.accel = (0,0,frandom(0.15,0.35));
		Level.SpawnParticle (WTFSMK);
	}

	void spawnburnedSmoke(vector3 position)
	{
		FSpawnParticleParams WTFSMK;
		WTFSMK.Pos = position + (random(-20,20),random(-20,20),random(0,owner.height));
        WTFSMK.Texture = TexMan.CheckForTexture("GNSML0");
		WTFSMK.Color1 = 0xFFFFFF;
		WTFSMK.Style = STYLE_Translucent;
		WTFSMK.Flags = SPF_ROLL;
		WTFSMK.Startroll = random(0,360);
		WTFSMK.RollVel = random(-5,5);
		WTFSMK.StartAlpha = 0.5;
		WTFSMK.Size = random(35,42);
		WTFSMK.SizeStep = 2;
		WTFSMK.Lifetime = Random(20,35); 
		WTFSMK.FadeStep = WTFSMK.StartAlpha / WTFSMK.Lifetime;
		WTFSMK.Vel = (frandom[bscsmk](-1.0,1.0),frandom[bscsmk](-1.0,1.0),frandom[bscsmk](0.1,1.5));
		if(CeilingPic == SkyFlatNum)
			WTFSMK.accel = getwinddir();
		Level.SpawnParticle (WTFSMK);
	}

    vector3 getwinddir()
	{
		if(!level)
			return (0,0,0);
		switch(level.levelnum % 4)
		{
			case 0:	return (0.05,0.05,0.03);	break;
			case 1:	return (-0.05,0.05,0.03);	break;
			case 2:	return (0.05,-0.05,0.03);	break;
			case 3:	return (-0.05,-0.05,0.03);	break;
		}
		return (0,0,0);
	}
}