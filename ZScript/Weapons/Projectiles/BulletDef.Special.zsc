class COD_AT4Rocket : COD_Projectile
{
	Default
	{
		Radius 6;
		Height 6;
		Speed 150;
		DamageType "Explosive";
		Gravity 0.2;
		Scale 1;
		Decal "Scorch";
		Renderstyle "Normal";
		
		COD_Projectile.BaseDamage 300;
		COD_Projectile.RipperCount 0;
	}
	
	static void SpawnExplosionEffect(Vector3 pos, Vector2 size, class<COD_Explosion> expCls = 'COD_Explosion', class<COD_Smoke> smokeCls = 'COD_ExplosionSmoke', int smokeCount = 50, class<SectorBreakDebris> debrisCls = 'SectorBreakDebris', int debrisCount = 200)
	{
		if (expCls)
		{
			Spawn(expCls, pos);
		}

		if (smokeCls)
		{
			for (int i = 0; i < smokeCount; ++i)
			{
				Vector3 spawnPos = Level.Vec3Offset(pos, (frandom(-size.X, size.X), frandom(-size.X, size.X), frandom(-size.Y, size.Y)));
				Spawn(smokeCls, spawnPos);
			}
		}
		
		if (debrisCls)
		{
			for (int i = 0; i < debrisCount; ++i)
			{
				Vector3 spawnPos = Level.Vec3Offset(pos, (frandom(-size.X, size.X), frandom(-size.X, size.X), frandom(-size.Y, size.Y)));
				
				double p = frandom(-70, 70);
				double a = random(0, 359);
				double spd = frandom(30, 100);
				Actor dbr = Spawn(debrisCls, spawnPos);
				dbr.Angle = a;
				dbr.Pitch = p;
				dbr.A_ChangeVelocity(spd * cos(p), 0, spd * sin(p), CVF_RELATIVE);
				dbr.ReactionTime = random(35, 35 * 5);
				dbr.Scale *= frandom(0.4, 1.0);
				dbr.BounceCount = random(5, 8);
			}
		}
	}
	
	States
	{
		Spawn:
			MISL A 1 BRIGHT;
			MISL A 1 BRIGHT A_StartSound("AT4/rocketloop",105,CHANF_LOOP);
		Fly:
			MISL A 1 BRIGHT; //do smoke stuff here
			Loop;
		Crash:
		XDeath:
		Death:
			TNT1 A 0 {
				A_Stop();
				bNOINTERACTION = true;
				bNOGRAVITY = true;
			}
			TNT1 A 0;
			TNT1 A 0
			{
				A_Explode((500), 128);
				A_StopSound(105);
				A_StartSound("effect/explosion", 0, CHANF_OVERLAP);
				Actor a = Spawn('COD_DummyActor', (self.pos));
				SpawnExplosionEffect(a.Pos, (64, 64), smokeCount: 64, debrisCount: 128);
			}
			Stop;
	}
}

class COD_40mmGrenade : COD_Projectile
{
	Default
	{
		Radius 6;
		Height 6;
		Speed 75;
		DamageType "Explosive";
		Gravity 1;
		Scale 0.25;
		Decal "Scorch";
		Renderstyle "Normal";
		
		COD_Projectile.BaseDamage 150;
		COD_Projectile.RipperCount 0;
	}
	
	static void SpawnExplosionEffect(Vector3 pos, Vector2 size, class<COD_Explosion> expCls = 'COD_Explosion', class<COD_Smoke> smokeCls = 'COD_ExplosionSmoke', int smokeCount = 50, class<SectorBreakDebris> debrisCls = 'SectorBreakDebris', int debrisCount = 200)
	{
		if (expCls)
		{
			Spawn(expCls, pos);
		}

		if (smokeCls)
		{
			for (int i = 0; i < smokeCount; ++i)
			{
				Vector3 spawnPos = Level.Vec3Offset(pos, (frandom(-size.X, size.X), frandom(-size.X, size.X), frandom(-size.Y, size.Y)));
				Spawn(smokeCls, spawnPos);
			}
		}
		
		if (debrisCls)
		{
			for (int i = 0; i < debrisCount; ++i)
			{
				Vector3 spawnPos = Level.Vec3Offset(pos, (frandom(-size.X, size.X), frandom(-size.X, size.X), frandom(-size.Y, size.Y)));
				
				double p = frandom(-70, 70);
				double a = random(0, 359);
				double spd = frandom(30, 100);
				Actor dbr = Spawn(debrisCls, spawnPos);
				dbr.Angle = a;
				dbr.Pitch = p;
				dbr.A_ChangeVelocity(spd * cos(p), 0, spd * sin(p), CVF_RELATIVE);
				dbr.ReactionTime = random(35, 35 * 5);
				dbr.Scale *= frandom(0.4, 1.0);
				dbr.BounceCount = random(5, 8);
			}
		}
	}
	
	int Timer;
	
	override void PostBeginPlay()
	{
		Timer = 0;
		Super.PostBeginPlay();
	}
	
	override void Tick()
	{
		Timer++;
		Super.Tick();
	}
	
	States
	{
		Spawn:
			GRNP A 1 BRIGHT;
		Fly:
			GRNP A 1 BRIGHT;
			Loop;
		Crash:
		XDeath:
		Death:
			TNT1 A 0
			{
				A_Stop();
			}
			GRNP A 1
			{
				if(Timer >= 5 && CountInv("COD40mmDone") == 0)
				{
					setstatelabel("Explode");
				}
				A_GiveInventory("COD40mmDone");
			}
			GRNP A 350;
			Stop;
		Explode:
			TNT1 A 0 NODELAY;
			TNT1 A 1
			{
				A_Explode((100), 256);
				A_StartSound("effect/explosion", 0, CHANF_OVERLAP);
				Actor a = Spawn('COD_DummyActor', (self.pos));
				SpawnExplosionEffect(a.Pos, (64, 64), smokeCount: 16, debrisCount: 32);
			}
			Stop;
	}
}

class COD40mmDone : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}